<%
include('/modules/dashboards.js');
function getApplicationKeyAndSecret(){
    var log = new Log();
    var ws = require('ws');
    var dashboardId = request.getParameter("id");
    var isUrl = request.getParameter("isUrl");
    var dashboard = findOne(dashboardId);
    var applicationName = dashboard.id;
    var config = require('/configs/designer.json');
    var oauthSettings = config.oauth;
    isUrl = endsWith(isUrl, "/") ? isUrl : isUrl + "/";
    dashboard.identityServerUrl = isUrl;

    var ids = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.useWSA = 1.0;
    options.action = "urn:registerOAuthApplicationData";
    var payload = '<xsd:registerOAuthApplicationData xmlns:xsd="http://org.apache.axis2/xsd" xmlns:xsd1="http://dto.oauth.identity.carbon.wso2.org/xsd"><xsd:application><xsd1:OAuthVersion>Oauth-2.0</xsd1:OAuthVersion><xsd1:applicationName>' + applicationName + '</xsd1:applicationName><xsd1:callbackUrl> </xsd1:callbackUrl><xsd1:grantTypes>authorization_code implicit password client_credentials refresh_token urn:ietf:params:oauth:grant-type:saml2-bearer iwa:ntlm</xsd1:grantTypes></xsd:application></xsd:registerOAuthApplicationData>';

    try {
        ids.open(options, isUrl + "services/OAuthAdminService", false, oauthSettings.username, oauthSettings.password);
        ids.send(payload);
    } catch (e) {
        log.error(e.toString());
    }

    var ids2 = new ws.WSRequest();
    var optionsAppData = new Array();
    optionsAppData.useSOAP = 1.2;
    optionsAppData.useWSA = 1.0;
    optionsAppData.action = "urn:getOAuthApplicationDataByAppName";
    var payloadAppData = '<xsd:getOAuthApplicationDataByAppName xmlns:xsd="http://org.apache.axis2/xsd"><xsd:appName>' + applicationName + '</xsd:appName></xsd:getOAuthApplicationDataByAppName>';
    var resultAppData;

    try {
        ids2.open(optionsAppData, isUrl + "services/OAuthAdminService", false, oauthSettings.username, oauthSettings.password);
        ids2.send(payloadAppData);
        resultAppData = ids2.responseE4X;
        var consumerKey = resultAppData..*::oauthConsumerKey[0].toString();
        var consumerSecret = resultAppData..*::oauthConsumerSecret[0].toString();

        dashboard.apiKey = consumerKey;
        dashboard.apiSecret = consumerSecret;
        dashboard.accessTokenUrl = isUrl + "oauth2/token";
    } catch (e) {
        dashboard.apiKey = "";
        dashboard.apiSecret = "";
        dashboard.accessTokenUrl = "";
        log.error(e.toString());
    }

    update(dashboard);

    return {"accessTokenUrl": dashboard.accessTokenUrl, "key": dashboard.apiKey, "secret": dashboard.apiSecret};
}

function endsWith(str, suffix){
    return str.indexOf(suffix, str.length - suffix.length) != -1;
}

print(getApplicationKeyAndSecret());
%>
