<%
function getSamlAccessToken() {
    var dashboards = require('/modules/dashboards.js');
    var usr = require('/modules/user.js');
    var oauth = require("oauth");

    // check whether the user is logged in
    var user = usr.current();
    if (!user) {
        return "UNAUTHORIZED_ERROR";
    }

    // match url for patterns
    var matcher = new URIMatcher(request.getRequestURI());
    if (matcher.match('/accesstokens/{id}')) {
        var vars = matcher.elements();
        var dashboardId = vars.id;
        var dashboard = dashboards.findOne(dashboardId);
        
        if (dashboard == null) {
            return "unable to find the dashboard";
        }
        var oauthEnabled = dashboard.enableOauth ? true : false;
        
        if (oauthEnabled) {
            var provider = {
                "oauth_version": "2",
                "authorization_url": "",
                "access_token_url": dashboard.accessTokenUrl,
                "request_token_url": "",
                "callback_url": "",
                "api_key": dashboard.apiKey,
                "api_secret": dashboard.apiSecret
            }
            
            var wso2is = new oauth.OAuthProvider(provider);
            var samlResp = session.get("samlResponse");
            var accessTokenArr = session.get("accessTokenArr");
            if (accessTokenArr == null) {
                accessTokenArr = [];
            } 
            var accessToken;
            for (var i = 0; i < accessTokenArr.length; i++) {
                if (accessTokenArr[i].did == dashboardId) {
                    accessToken = accessTokenArr[i].accessToken;
                    break;
                }
            }

            if (accessToken == null || accessToken == "") {
                try {
                    var accessTokenResponse = wso2is.getTokenResponse(samlResp);
                    accessToken = accessTokenResponse.getAccessToken();
                    accessTokenArr.push({"did": dashboardId, "accessToken": accessToken});
                    session.put("accessTokenArr", accessTokenArr);
                    return {"accessToken": accessToken};
                } catch (err) {
                    return {"accessToken": "Access token not available. " + err.message};
                }
            } else {
                return {"accessToken": accessToken};
            }
        } else {
            return {"accessToken": ""};
        }
    }
}
print(getSamlAccessToken());
%>